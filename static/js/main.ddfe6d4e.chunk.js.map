{"version":3,"sources":["components/InfoBoard.js","components/Button.js","components/GameRow.js","components/Gamerows.js","components/HiddenColors.js","components/SideBoard.js","components/LoadingCircle.js","components/GameEndMessage.js","initialState.js","App.js","serviceWorker.js","index.js"],"names":["InfoBoard","_ref","newGame","giveUp","react_default","a","createElement","className","onClick","button","text","GameRow","colors","onDragOver","onDrop","onDragOut","opacity","turn","guessedColors","clickable","nextRound","colorFields","map","colorField","key","id","draggable","event","onDragStart","color","style","backgroundColor","concat","opacityNew","rightArrowAndTurn","Button","GameRows","gamerows","data","gameRows","row","index","checkTurnNumber","components_GameRow","status","react_transition_group","transitionName","transitionAppear","transitionAppearTimeOut","HiddenColors","hiddenColors","slideOut","loadingMessage","hiddenColorsRow","hiddenColor","SideBoard","gamePieces","loadingCircle","type","react_loading_default","height","width","GameEndMessage","gameEnded","gameEndMessage","messageDelivered","initialState","App","state","loading","showHiddenColors","fillHiddenColors","Object","toConsumableArray","_this","randomNumbers","i","length","randomNumber","Math","floor","random","push","setState","onDragOverHandler","preventDefault","onDragStartHandler","colorDragged","dataTransfer","setData","onDragOutHandler","colorDraggedId","gamerow","objectSpread","colorArray","find","object","onDropHandler","indexOfDropCircle","getData","checkSameColors","colorsFromPlayer","rightColors","colorsReduced","filter","rightColorsReduced","rightColor","helparray","forEach","item","number","indexOf","splice","differenceToFill","JSON","stringify","loadingReady","setTimeout","window","location","href","this","value","localStorage","setItem","LoadingCircle","slideClass","opacityHiddenColors","components_InfoBoard","turnNumber","Gamerows","components_GameEndMessage","components_HiddenColors","components_SideBoard","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAaeA,EAXG,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,QAASC,EAAaF,EAAbE,OAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBC,QAASN,GAA5C,aACAE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBC,QAASL,GAA5C,aCQGM,EAbA,SAAAR,GAAuB,IAApBO,EAAoBP,EAApBO,QAASE,EAAWT,EAAXS,KACvB,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIC,UAAU,oBACVC,QAASA,GAERE,KCsDFC,EA3DX,SAAAV,GAAmG,IAAhGW,EAAgGX,EAAhGW,OAAQC,EAAwFZ,EAAxFY,WAAYC,EAA4Eb,EAA5Ea,OAAQC,EAAoEd,EAApEc,UAAWC,EAAyDf,EAAzDe,QAASC,EAAgDhB,EAAhDgB,KAAMC,EAA0CjB,EAA1CiB,cAAeC,EAA2BlB,EAA3BkB,UAAWC,EAAgBnB,EAAhBmB,UACzEC,EAAcT,EAAOU,IAAI,SAAAC,GAC3B,OACInB,EAAAC,EAAAC,cAAA,OACIC,UAAU,cACViB,IAAKD,EAAWE,IAEhBrB,EAAAC,EAAAC,cAAA,OACIoB,WAAS,EACTb,WAAY,SAAAc,GAAK,OAAId,EAAWc,IAChCb,OAAQ,SAAAa,GAAK,OAAIb,EAAOa,EAAOJ,EAAWE,KAC1CG,YAAa,SAAAD,GAAK,OAAIZ,EAAUY,EAAOJ,EAAWE,GAAIF,EAAWM,QACjEtB,UAAU,gBACVuB,MAAO,CAAEC,gBAAe,GAAAC,OAAKT,EAAWM,aAOlDI,EAAajB,IAAYC,EAAO,IAAM,IACtCiB,EACF9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwBuB,MAAO,CAAEd,QAASiB,IACrD7B,EAAAC,EAAAC,cAAA,kBAAUW,EAAO,GACjBb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEvB,OACIH,EAAAC,EAAAC,cAAA,OAAKC,UAAS,0BAAAyB,OAA4Bb,IAErCe,EACD9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OACIC,UAAU,SACVuB,MAAO,CAAEC,gBAAe,GAAAC,OAAKd,EAAc,OAE/Cd,EAAAC,EAAAC,cAAA,OACIC,UAAU,SACVuB,MAAO,CAAEC,gBAAe,GAAAC,OAAKd,EAAc,OAE/Cd,EAAAC,EAAAC,cAAA,OACIC,UAAU,SACVuB,MAAO,CAAEC,gBAAe,GAAAC,OAAKd,EAAc,OAE/Cd,EAAAC,EAAAC,cAAA,OACIC,UAAU,SACVuB,MAAO,CAAEC,gBAAe,GAAAC,OAAKd,EAAc,QAIlDG,EACDjB,EAAAC,EAAAC,cAAC6B,EAAD,CACIzB,KAAK,WACLF,QAASY,aCjBdgB,EAlCE,SAAAnC,GAAkE,IAA/DoC,EAA+DpC,EAA/DoC,SAAUpB,EAAqDhB,EAArDgB,KAAMJ,EAA+CZ,EAA/CY,WAAYC,EAAmCb,EAAnCa,OAAQC,EAA2Bd,EAA3Bc,UAAWK,EAAgBnB,EAAhBmB,UACzDkB,EAAOD,EACPE,EAAWD,EAAKhB,IAAI,SAACkB,EAAKC,GAC5B,IAAMC,EAAkBzB,IAASwB,EACjC,OACIrC,EAAAC,EAAAC,cAACqC,EAAD,CACInB,IAAKiB,EACL5B,WAAYA,EACZC,OAAQA,EACRF,OAAQ0B,EAAKG,GAAO7B,OACpBO,UAAWqB,EAAII,OACfxB,UAAWA,EACXsB,gBAAiBA,EACjBzB,KAAMA,EACNC,cAAeoB,EAAKG,GAAOvB,cAC3BH,UAAWA,EACXC,QAASyB,MAIrB,OACIrC,EAAAC,EAAAC,cAACuC,EAAA,mBAAD,CACIC,eAAe,YACfC,kBAAkB,EAClBC,wBAAyB,KAEzB5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVgC,KCAFU,EA9BM,SAAAhD,GAAyD,IAAtDiD,EAAsDjD,EAAtDiD,aAAcC,EAAwClD,EAAxCkD,SAAUC,EAA8BnD,EAA9BmD,eAAgBpC,EAAcf,EAAde,QACtDqC,EAAkBH,EAAa5B,IAAI,SAACgC,EAAab,GACnD,OACIrC,EAAAC,EAAAC,cAAA,OACIC,UAAU,cACViB,IAAKiB,GAELrC,EAAAC,EAAAC,cAAA,OACIC,UAAU,gBACVuB,MAAO,CAAEC,gBAAe,GAAAC,OAAKsB,SAM7C,OACIlD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,uBAAyB4C,GACrC/C,EAAAC,EAAAC,cAAA,UACK8C,IAGThD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBuB,MAAO,CAAEd,QAASA,IAC5CqC,KCSFE,EA9BG,SAAAtD,GAA2B,IAAxBqC,EAAwBrC,EAAxBqC,KAAMV,EAAkB3B,EAAlB2B,YAEjB4B,EAAalB,EAAKkB,WAAWlC,IAAI,SAACO,EAAOY,GAC3C,OACIrC,EAAAC,EAAAC,cAAA,OACIC,UAAU,4BACVmB,WAAS,EACTE,YAAa,SAAAD,GAAK,OAAIC,EAAYD,EAAOE,IACzCL,IAAKiB,EACLX,MAAO,CAAEC,gBAAe,GAAAC,OAAKH,QAMzC,OACIzB,EAAAC,EAAAC,cAACuC,EAAA,mBAAD,CACItC,UAAU,aACVuC,eAAe,YACfC,kBAAkB,EAClBC,wBAAyB,KAEzB5C,EAAAC,EAAAC,cAAA,WACKkD,sBCjBFC,EAPO,SAAAxD,KAAGyD,KAAHzD,EAAS4B,MAAT,OAClBzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CAAcqD,KAAM,OAAQ7B,MAAO,QAAS+B,OAAQ,GAAIC,MAAO,OCOxDC,EAXQ,SAAA7D,GAAmC,IAAhC8D,EAAgC9D,EAAhC8D,UAAWC,EAAqB/D,EAArB+D,eAC3BhD,EAAU+C,EAAY,IAAM,IAC5BE,EAAsC,SAAnBD,EAA4B,GAAK,mBAE1D,OACI5D,EAAAC,EAAAC,cAAA,OAAKC,UAAW0D,EAAkBnC,MAAO,CAAEd,QAASA,IAChDZ,EAAAC,EAAAC,cAAA,cAAM0D,EAAN,OCRCE,EAAe,CAExBhB,aAAc,CAAC,cAAe,cAAe,cAAe,eAC5Db,SAAU,CACN,CACIO,OAAQ,KACR1B,cAAe,CAAC,cAAe,cAAe,cAAe,eAC7DN,OAAQ,CACJ,CAAEa,GAAI,EAAGI,MAAO,eAChB,CAAEJ,GAAI,EAAGI,MAAO,eAChB,CAAEJ,GAAI,EAAGI,MAAO,eAChB,CAAEJ,GAAI,EAAGI,MAAO,iBAGxB,CACIe,OAAQ,WACR1B,cAAe,CAAC,cAAe,cAAe,cAAe,eAC7DN,OAAQ,CACJ,CAAEa,GAAI,EAAGI,MAAO,eAChB,CAAEJ,GAAI,EAAGI,MAAO,eAChB,CAAEJ,GAAI,EAAGI,MAAO,eAChB,CAAEJ,GAAI,EAAGI,MAAO,iBAGxB,CACIe,OAAQ,WACR1B,cAAe,CAAC,cAAe,cAAe,cAAe,eAC7DN,OAAQ,CACJ,CAAEa,GAAI,EAAGI,MAAO,eAChB,CAAEJ,GAAI,GAAII,MAAO,eACjB,CAAEJ,GAAI,GAAII,MAAO,eACjB,CAAEJ,GAAI,GAAII,MAAO,iBAGzB,CACIe,OAAQ,WACR1B,cAAe,CAAC,cAAe,cAAe,cAAe,eAC7DN,OAAQ,CACJ,CAAEa,GAAI,GAAII,MAAO,eACjB,CAAEJ,GAAI,GAAII,MAAO,eACjB,CAAEJ,GAAI,GAAII,MAAO,eACjB,CAAEJ,GAAI,GAAII,MAAO,iBAGzB,CACIe,OAAQ,WACR1B,cAAe,CAAC,cAAe,cAAe,cAAe,eAC7DN,OAAQ,CACJ,CAAEa,GAAI,GAAII,MAAO,eACjB,CAAEJ,GAAI,GAAII,MAAO,eACjB,CAAEJ,GAAI,GAAII,MAAO,eACjB,CAAEJ,GAAI,GAAII,MAAO,iBAGzB,CACIe,OAAQ,WACR1B,cAAe,CAAC,cAAe,cAAe,cAAe,eAC7DN,OAAQ,CACJ,CAAEa,GAAI,GAAII,MAAO,eACjB,CAAEJ,GAAI,GAAII,MAAO,eACjB,CAAEJ,GAAI,GAAII,MAAO,eACjB,CAAEJ,GAAI,GAAII,MAAO,kBAK7B2B,WAAY,CAAC,UAAW,OAAQ,aAAc,UAAW,UAAW,YCoLzDW,oNA1ObC,MAAQ,CACNC,SAAS,EACTL,eAAgB,OAChBD,WAAW,EACXO,kBAAkB,EAClBrD,KAAM,EACNiC,aAAc,GACdb,SAAU,GACVmB,WAAY,MAgBde,iBAAmB,WAGjB,IAFA,IAAM3D,EAAM,GAAAoB,OAAAwC,OAAAC,EAAA,EAAAD,CAAOE,EAAKN,MAAMZ,YAAlB,CAA8B,gBACtCmB,EAAgB,GACXC,EAAI,EAAGA,GAAKF,EAAKN,MAAMlB,aAAa2B,OAAQD,IAAK,CACxD,IAAIE,EAAeC,KAAKC,MAAOD,KAAKE,SAAWrE,EAAOiE,QAClDC,IAAiBlE,EAAOiE,SAAUC,EAAelE,EAAOiE,OAAS,GACrEF,EAAcO,KAAKJ,GAErB,IAAM5B,EAAeyB,EAAcrD,IAAI,SAAAwD,GACrC,OAAQlE,EAAOkE,KAEjBJ,EAAKS,SAAS,CACZjC,aAAcA,OAIlBkC,kBAAoB,SAAAzD,GAClBA,EAAM0D,oBAGRC,mBAAqB,SAAC3D,EAAO4D,GAC3B5D,EAAM6D,aAAaC,QAAQ,eAAgBF,MAE7CG,iBAAmB,SAAC/D,EAAOgE,EAAgBJ,GACzC5D,EAAM6D,aAAaC,QAAQ,eAAgBF,GAE3C,IAAIlD,EAAWqC,EAAKN,MAAM/B,SAASf,IAAI,SAAAsE,GAAa,OAAOpB,OAAAqB,EAAA,EAAArB,CAAA,GAAKoB,KAC5D3E,EAAOyD,EAAKN,MAAMnD,KAClB6E,EAAapB,EAAKN,MAAM/B,SAASpB,GAAML,OAAOU,IAAI,SAAAO,GAAW,OAAO2C,OAAAqB,EAAA,EAAArB,CAAA,GAAK3C,KAC7EiE,EAAWC,KAAK,SAAAC,GAAM,OAAIA,EAAOvE,KAAOkE,IAAgB9D,MAAQ,cAChEQ,EAASpB,GAAML,OAASkF,EAExBpB,EAAKS,SAAS,CACZ9C,SAAUA,OAId4D,cAAgB,SAACtE,EAAOuE,GACtB,IAAIX,EAAe5D,EAAM6D,aAAaW,QAAQ,gBAC1ClF,EAAOyD,EAAKN,MAAMnD,KAClB6E,EAAapB,EAAKN,MAAM/B,SAASpB,GAAML,OAAOU,IAAI,SAAAO,GAAW,OAAO2C,OAAAqB,EAAA,EAAArB,CAAA,GAAK3C,KAC7EiE,EAAWC,KAAK,SAAAC,GAAM,OAAIA,EAAOvE,KAAOyE,IAAmBrE,MAAQ0D,EAGnE,IAAIlD,EAAWqC,EAAKN,MAAM/B,SAASf,IAAI,SAAAsE,GAAa,OAAOpB,OAAAqB,EAAA,EAAArB,CAAA,GAAKoB,KAChEvD,EAASpB,GAAML,OAASkF,EACxBpB,EAAKS,SAAS,CACZ9C,SAAUA,OAId+D,gBAAkB,WAchB,IAbA,IAAInF,EAAOyD,EAAKN,MAAMnD,KAClBoF,EAAmB3B,EAAKN,MAAM/B,SAASpB,GAAML,OAAOU,IAAI,SAAAO,GAAW,OAAOA,EAAMA,QAChFyE,EAAW9B,OAAAC,EAAA,EAAAD,CAAOE,EAAKN,MAAMlB,cAC7BhC,EAAgB,GAEdqF,EAAgBF,EAAiBG,OAAO,SAAC3E,EAAOY,GACpD,OAAOZ,IAAUyE,EAAY7D,KAEzBgE,EAAqBH,EAAYE,OAAO,SAACE,EAAYjE,GACzD,OAAOiE,IAAeL,EAAiB5D,KAIhCmC,EAAI,EAAGA,GAAKyB,EAAiBxB,OAAS0B,EAAc1B,OAAQD,IACnE1D,EAAcgE,KAAK,SAIrB,IAAIyB,EAAY,GAChBJ,EAAcK,QAAQ,SAACC,EAAMpE,GAC3B,IAAK,IAAImC,EAAI,EAAGA,EAAI6B,EAAmB5B,OAAQD,IACzCiC,IAASJ,EAAmB7B,IAC9B+B,EAAUzB,KAAK2B,GAGnB,GAAIF,EAAU9B,OAAS,EAAG,CACxB3D,EAAcgE,KAAK,SACnB,IAAI4B,EAASL,EAAmBM,QAAQJ,EAAU,IAClDF,EAAmBO,OAAOF,EAAQ,GAClCH,EAAY,MAKhB,IADA,IAAIM,EAAmBvC,EAAKN,MAAMlB,aAAa2B,OAAS3D,EAAc2D,OAC7DD,EAAI,EAAGA,EAAIqC,EAAkBrC,IACpC1D,EAAcgE,KAAK,eAIrB,IAAI7C,EAAWqC,EAAKN,MAAM/B,SAASf,IAAI,SAAAsE,GAAa,OAAOpB,OAAAqB,EAAA,EAAArB,CAAA,GAAKoB,KAChEvD,EAASpB,GAAMC,cAAgBA,EAE3BgG,KAAKC,UAAUjG,KAAmBgG,KAAKC,UAAU,CAAC,QAAS,QAAS,QAAS,UAC/EzC,EAAKS,SAAS,CACZ9C,SAAUA,EACV0B,WAAW,EACXC,eAAgB,+BAChBM,kBAAkB,IAGX4C,KAAKC,UAAUjG,KAAmBgG,KAAKC,UAAU,CAAC,QAAS,QAAS,QAAS,WAAiC,IAApBzC,EAAKN,MAAMnD,KAC9GyD,EAAKS,SAAS,CACZ9C,SAAUA,GACT,kBAAMqC,EAAKX,cAGdW,EAAKS,SAAS,CACZ9C,SAAUA,GACT,kBAAMqC,EAAKtD,iBAIlBA,UAAY,WACV,IAAIH,EAAOyD,EAAKN,MAAMnD,KAClBoB,EAAWqC,EAAKN,MAAM/B,SAASf,IAAI,SAAAsE,GAAa,OAAOpB,OAAAqB,EAAA,EAAArB,CAAA,GAAKoB,KAChEvD,EAASpB,GAAM2B,OAAS,WAExBP,EADepB,EAAO,GACH2B,OAAS,KAE5B8B,EAAKS,SAAS,CACZlE,KAAMyD,EAAKN,MAAMnD,KAAO,GACvB,WACDyD,EAAKS,SAAS,CACZ9C,SAAUA,SAKhBnC,QAAU,WAGR,IAFA,IAAImC,EAAWqC,EAAKN,MAAM/B,SAASf,IAAI,SAAAsE,GAAa,OAAOpB,OAAAqB,EAAA,EAAArB,CAAA,GAAKoB,KAEvDhB,EAAI,EAAGA,EAAIF,EAAKN,MAAM/B,SAASwC,OAAQD,IAC9CvC,EAASuC,GAAGhE,OAAOgG,QAAQ,SAAA/E,GAAK,OAAIA,EAAMA,MAAQ,gBAClDQ,EAASuC,GAAG1D,cAAc0F,QAAQ,SAAC/E,EAAOY,EAAOvB,GAAf,OAAiCA,EAAcuB,GAAS,gBAC1FJ,EAASqC,EAAKN,MAAMnD,MAAM2B,OAAS,WACnCP,EAAS,GAAGO,OAAS,KAEvB8B,EAAKS,SAAS,CACZlE,KAAM,EACNoB,SAAUA,EACV0B,WAAW,EACXC,eAAgB,OAChBK,SAAS,EACTC,kBAAkB,GACjB,kBAAMI,EAAK0C,oBAEhBrD,UAAY,WACV,IAA6B,IAAzBW,EAAKN,MAAML,UAAqB,CAClC,IAAM9C,EAAOyD,EAAKN,MAAMnD,KACpBoB,EAAWqC,EAAKN,MAAM/B,SAASf,IAAI,SAAAsE,GAAa,OAAOpB,OAAAqB,EAAA,EAAArB,CAAA,GAAKoB,KAChEvD,EAASpB,GAAM2B,OAAS,WACxB8B,EAAKS,SAAS,CACZpB,WAAW,EACX1B,SAAUA,EACV2B,eAAgB,oBACf,kBAAMqD,WAAW,kBAAM3C,EAAKS,SAAS,CAAEb,kBAAkB,KAAS,WAIzE8C,aAAe,WACbC,WAAW,kBAAM3C,EAAKS,SAAS,CAAEd,SAAS,GAAS,WAAQK,EAAKH,sBAAuB,2FA/KvF+C,OAAOC,SAASC,KAAO,gDACvBC,KAAKtC,SAAS,CACZjC,aAAcgB,EAAahB,aAC3Bb,SAAU6B,EAAa7B,SACvBmB,WAAYU,EAAaV,yDAI3BiE,KAAKL,eACL,IAAMM,EAAKlD,OAAAqB,EAAA,EAAArB,CAAA,GAAQiD,KAAKrD,MAAMJ,gBAC9B2D,aAAaC,QAAQ,QAASF,oCA0K9B,IAAMtE,EAAiBqE,KAAKrD,MAAMC,QAAUjE,EAAAC,EAAAC,cAACuH,EAAD,MAAoB,aAC1DC,EAAaL,KAAKrD,MAAML,UAAY,YAAc,GAClDgE,EAAsBN,KAAKrD,MAAME,iBAAmB,IAAM,IAEhE,OACElE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAC0H,EAAD,CACEC,WAAYR,KAAKrD,MAAMnD,KACvBf,QAASuH,KAAKvH,QACdC,OAAQsH,KAAK1D,YAGf3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC4H,EAAD,CACE7F,SAAUoF,KAAKrD,MAAM/B,SACrBpB,KAAMwG,KAAKrD,MAAMnD,KACjBJ,WAAY4G,KAAKrC,kBACjBtE,OAAQ2G,KAAKxB,cACblF,UAAW0G,KAAK/B,iBAChBtE,UAAWqG,KAAKrB,kBAElBhG,EAAAC,EAAAC,cAAC6H,EAAD,CACEpE,UAAW0D,KAAKrD,MAAML,UACtBC,eAAgByD,KAAKrD,MAAMJ,iBAE7B5D,EAAAC,EAAAC,cAAC8H,EAAD,CACElF,aAAcuE,KAAKrD,MAAMlB,aACzBlC,QAAS+G,EACT5E,SAAU2E,EACV9D,eAAgByD,KAAKrD,MAAMJ,eAC3BZ,eAAgBA,EAChBW,UAAW0D,KAAKrD,MAAML,aAG1B3D,EAAAC,EAAAC,cAAC+H,EAAD,CACE/F,KAAMmF,KAAKrD,MACXxC,YAAa6F,KAAKnC,6BArOVgD,cCEEC,QACW,cAA7BjB,OAAOC,SAASiB,UAEe,UAA7BlB,OAAOC,SAASiB,UAEhBlB,OAAOC,SAASiB,SAASC,MACvB,2DCZNC,IAASC,OAAOvI,EAAAC,EAAAC,cAACsI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ddfe6d4e.chunk.js","sourcesContent":["import React from 'react'\n\nconst InfoBoard = ({ newGame, giveUp }) => {\n    return (\n        <div className=\"info-board\">\n            <h1>Master Mind </h1>\n            <div className=\"info-board-button\" onClick={newGame}> new game</div>\n            <div className=\"info-board-button\" onClick={giveUp}>give up</div>\n        </div>\n    )\n}\n\n\nexport default InfoBoard\n","import React from 'react'\n\nconst button = ({ onClick, text }) => {\n    return (\n        <div>\n            <button\n                className=\"next-round-button\"\n                onClick={onClick}\n            >\n                {text}\n            </button>\n        </div>\n    )\n}\n\nexport default button\n","import React from 'react'\nimport Button from './Button'\n\nconst GameRow =\n    ({ colors, onDragOver, onDrop, onDragOut, opacity, turn, guessedColors, clickable, nextRound }) => {\n        const colorFields = colors.map(colorField => {\n            return (\n                <div\n                    className=\"game-circle\"\n                    key={colorField.id}\n                >\n                    <div\n                        draggable\n                        onDragOver={event => onDragOver(event)}\n                        onDrop={event => onDrop(event, colorField.id)}\n                        onDragStart={event => onDragOut(event, colorField.id, colorField.color)}\n                        className=\"circle-inside\"\n                        style={{ backgroundColor: `${colorField.color}` }}\n                    >\n                    </div>\n                </div>\n            )\n        })\n\n        const opacityNew = opacity === turn ? \"1\" : \"0\"\n        const rightArrowAndTurn =\n            <div className=\"right-arrow-container\" style={{ opacity: opacityNew }}>\n                <h2>Turn {turn + 1}</h2>\n                <div className=\"arrow-right\"></div>\n            </div>\n        return (\n            <div className={`game-row  game-row-moz ${clickable}`}>\n\n                {rightArrowAndTurn}\n                <div className=\"hits\">\n                    <div\n                        className=\"square\"\n                        style={{ backgroundColor: `${guessedColors[0]}` }}\n                    ></div>\n                    <div\n                        className=\"square\"\n                        style={{ backgroundColor: `${guessedColors[1]}` }}\n                    ></div>\n                    <div\n                        className=\"square\"\n                        style={{ backgroundColor: `${guessedColors[2]}` }}\n                    ></div>\n                    <div\n                        className=\"square\"\n                        style={{ backgroundColor: `${guessedColors[3]}` }}\n                    ></div>\n\n                </div>\n                {colorFields}\n                <Button\n                    text=\"TRY IT!!\"\n                    onClick={nextRound}\n                />\n            </div>\n        )\n    }\n\n\nexport default GameRow\n\n\n","import React from 'react'\nimport GameRow from './GameRow'\nimport { CSSTransitionGroup } from 'react-transition-group'\n\n\nconst GameRows = ({ gamerows, turn, onDragOver, onDrop, onDragOut, nextRound }) => {\n    const data = gamerows\n    const gameRows = data.map((row, index) => {\n        const checkTurnNumber = turn === index\n        return (\n            <GameRow\n                key={index}\n                onDragOver={onDragOver}\n                onDrop={onDrop}\n                colors={data[index].colors}\n                clickable={row.status}\n                nextRound={nextRound}\n                checkTurnNumber={checkTurnNumber}\n                turn={turn}\n                guessedColors={data[index].guessedColors}\n                onDragOut={onDragOut}\n                opacity={index}\n            />\n        )\n    })\n    return (\n        <CSSTransitionGroup\n            transitionName=\"fade-rows\"\n            transitionAppear={true}\n            transitionAppearTimeOut={500}\n        >\n            <div className=\"game-rows\">\n                {gameRows}\n            </div>\n        </CSSTransitionGroup>\n    )\n}\n\n\nexport default GameRows\n","import React from 'react'\n\nconst HiddenColors = ({ hiddenColors, slideOut, loadingMessage, opacity }) => {\n    const hiddenColorsRow = hiddenColors.map((hiddenColor, index) => {\n        return (\n            <div\n                className=\"game-circle\"\n                key={index}\n            >\n                <div\n                    className=\"circle-inside\"\n                    style={{ backgroundColor: `${hiddenColor}` }}\n                >\n                </div>\n            </div>\n        )\n    })\n    return (\n        <div className=\"hidden-colors-container\">\n            <div className={\"hidden-colors-board \" + slideOut}>\n                <h1 >\n                    {loadingMessage}\n                </h1>\n            </div>\n            <div className=\"hidden-colors\" style={{ opacity: opacity }}>\n                {hiddenColorsRow}\n            </div>\n        </div>\n    )\n}\n\n\nexport default HiddenColors\n","import React from 'react'\nimport { CSSTransitionGroup } from 'react-transition-group'\n\n\nconst SideBoard = ({ data, onDragStart }) => {\n\n    const gamePieces = data.gamePieces.map((color, index) => {\n        return (\n            <div\n                className=\"circle-inside game-pieces\"\n                draggable\n                onDragStart={event => onDragStart(event, color)}\n                key={index}\n                style={{ backgroundColor: `${color}` }}\n            >\n            </div>\n        )\n    })\n\n    return (\n        <CSSTransitionGroup\n            className=\"side-board\"\n            transitionName=\"fade-rows\"\n            transitionAppear={true}\n            transitionAppearTimeOut={500}\n        >\n            <div>\n                {gamePieces}\n            </div>\n        </CSSTransitionGroup>\n    )\n}\n\n\nexport default SideBoard\n","import React from 'react';\nimport ReactLoading from 'react-loading';\n\nconst loadingCircle = ({ type, color }) => (\n    <div className=\"loading\">\n        <span>Loading new game</span>\n        <ReactLoading type={\"spin\"} color={\"white\"} height={40} width={40} />\n    </div>\n);\n\nexport default loadingCircle;","import React from 'react'\n\nconst GameEndMessage = ({ gameEnded, gameEndMessage }) => {\n    const opacity = gameEnded ? \"1\" : \"0\"\n    const messageDelivered = gameEndMessage === \"Text\" ? \"\" : \"game-end-message\"\n\n    return (\n        <div className={messageDelivered} style={{ opacity: opacity }}>\n            <h1> {gameEndMessage} </h1>\n        </div>\n    )\n}\n\nexport default GameEndMessage\n","export const initialState = {\n\n    hiddenColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n    gamerows: [\n        {\n            status: null,\n            guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n            colors: [\n                { id: 1, color: 'transparent' },\n                { id: 2, color: 'transparent' },\n                { id: 3, color: 'transparent' },\n                { id: 4, color: 'transparent' }\n            ]\n        },\n        {\n            status: \"inactive\",\n            guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n            colors: [\n                { id: 5, color: 'transparent' },\n                { id: 6, color: 'transparent' },\n                { id: 7, color: 'transparent' },\n                { id: 8, color: 'transparent' }\n            ]\n        },\n        {\n            status: \"inactive\",\n            guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n            colors: [\n                { id: 9, color: 'transparent' },\n                { id: 10, color: 'transparent' },\n                { id: 11, color: 'transparent' },\n                { id: 12, color: 'transparent' }\n            ]\n        },\n        {\n            status: \"inactive\",\n            guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n            colors: [\n                { id: 13, color: 'transparent' },\n                { id: 14, color: 'transparent' },\n                { id: 15, color: 'transparent' },\n                { id: 16, color: 'transparent' }\n            ]\n        },\n        {\n            status: \"inactive\",\n            guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n            colors: [\n                { id: 17, color: 'transparent' },\n                { id: 18, color: 'transparent' },\n                { id: 19, color: 'transparent' },\n                { id: 20, color: 'transparent' }\n            ]\n        },\n        {\n            status: \"inactive\",\n            guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n            colors: [\n                { id: 21, color: 'transparent' },\n                { id: 22, color: 'transparent' },\n                { id: 23, color: 'transparent' },\n                { id: 24, color: 'transparent' }\n            ]\n        },\n\n    ],\n    gamePieces: [\"#FFDC00\", \"pink\", \"aquamarine\", \"#01FF70\", \"#0074D9\", \"#111111\"]\n}","import React, { Component } from 'react';\nimport InfoBoard from './components/InfoBoard'\nimport GameRows from './components/Gamerows'\nimport HiddenColors from './components/HiddenColors'\nimport SideBoard from './components/SideBoard'\nimport LoadingCirlce from \"./components/LoadingCircle\";\nimport GameEndMessage from \"./components/GameEndMessage\";\nimport { initialState } from './initialState'\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    loading: true,\n    gameEndMessage: 'Text',\n    gameEnded: false,\n    showHiddenColors: false,\n    turn: 0,\n    hiddenColors: [],\n    gamerows: [],\n    gamePieces: []\n  }\n  componentWillMount() {\n    window.location.href = \"https://gameswithreact.github.io/master-mind/\"\n    this.setState({\n      hiddenColors: initialState.hiddenColors,\n      gamerows: initialState.gamerows,\n      gamePieces: initialState.gamePieces\n    })\n  }\n  componentDidMount() {\n    this.loadingReady()\n    const value = { ...this.state.gameEndMessage }\n    localStorage.setItem(\"state\", value)\n  }\n\n  fillHiddenColors = () => {\n    const colors = [...this.state.gamePieces, 'transparent']\n    let randomNumbers = []\n    for (let i = 1; i <= this.state.hiddenColors.length; i++) {\n      let randomNumber = Math.floor((Math.random() * colors.length))\n      if (randomNumber === colors.length) { randomNumber = colors.length - 1 }\n      randomNumbers.push(randomNumber)\n    }\n    const hiddenColors = randomNumbers.map(randomNumber => {\n      return (colors[randomNumber])\n    })\n    this.setState({\n      hiddenColors: hiddenColors\n    })\n  }\n\n  onDragOverHandler = event => {\n    event.preventDefault()\n  }\n\n  onDragStartHandler = (event, colorDragged) => {\n    event.dataTransfer.setData(\"colorDragged\", colorDragged)\n  }\n  onDragOutHandler = (event, colorDraggedId, colorDragged) => {\n    event.dataTransfer.setData(\"colorDragged\", colorDragged)\n\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    let turn = this.state.turn\n    let colorArray = this.state.gamerows[turn].colors.map(color => { return { ...color } })\n    colorArray.find(object => object.id === colorDraggedId).color = \"transparent\"\n    gamerows[turn].colors = colorArray\n\n    this.setState({\n      gamerows: gamerows\n    })\n  }\n\n  onDropHandler = (event, indexOfDropCircle) => {\n    let colorDragged = event.dataTransfer.getData(\"colorDragged\")\n    let turn = this.state.turn\n    let colorArray = this.state.gamerows[turn].colors.map(color => { return { ...color } })\n    colorArray.find(object => object.id === indexOfDropCircle).color = colorDragged\n\n    //Setting State\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    gamerows[turn].colors = colorArray\n    this.setState({\n      gamerows: gamerows\n    })\n  }\n\n  checkSameColors = () => {\n    let turn = this.state.turn\n    let colorsFromPlayer = this.state.gamerows[turn].colors.map(color => { return color.color })\n    let rightColors = [...this.state.hiddenColors]\n    let guessedColors = []\n\n    const colorsReduced = colorsFromPlayer.filter((color, index) => {\n      return color !== rightColors[index]\n    })\n    const rightColorsReduced = rightColors.filter((rightColor, index) => {\n      return rightColor !== colorsFromPlayer[index]\n    })\n    /////////////////////////////////////////////////////\n    ///Putting Black Colors into guessed Array\n    for (let i = 1; i <= colorsFromPlayer.length - colorsReduced.length; i++) {\n      guessedColors.push(\"black\")\n    }\n    //////////////////////////////////////////////////\n    ///Checking reduced arrays to put white colors into guessedColors\n    let helparray = []\n    colorsReduced.forEach((item, index) => {\n      for (let i = 0; i < rightColorsReduced.length; i++) {\n        if (item === rightColorsReduced[i]) {\n          helparray.push(item)\n        }\n      }\n      if (helparray.length > 0) {\n        guessedColors.push(\"white\")\n        let number = rightColorsReduced.indexOf(helparray[0])\n        rightColorsReduced.splice(number, 1)\n        helparray = []\n      }\n    })\n    ////Fill guessedColors with null, if its shorter than 4\n    let differenceToFill = this.state.hiddenColors.length - guessedColors.length\n    for (let i = 0; i < differenceToFill; i++) {\n      guessedColors.push('transparent')\n    }\n\n    ///Putting guessedColors into state\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    gamerows[turn].guessedColors = guessedColors\n\n    if (JSON.stringify(guessedColors) === JSON.stringify([\"black\", \"black\", \"black\", \"black\"])) {\n      this.setState({\n        gamerows: gamerows,\n        gameEnded: true,\n        gameEndMessage: \"You won, congratulations! :)\",\n        showHiddenColors: true\n      })\n\n    } else if (JSON.stringify(guessedColors) !== JSON.stringify([\"black\", \"black\", \"black\", \"black\"]) && this.state.turn === 5) {\n      this.setState({\n        gamerows: gamerows,\n      }, () => this.gameEnded())\n    }\n    else {\n      this.setState({\n        gamerows: gamerows\n      }, () => this.nextRound())\n    }\n  }\n\n  nextRound = () => {\n    let turn = this.state.turn\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    gamerows[turn].status = \"inactive\"\n    let nextTurn = turn + 1\n    gamerows[nextTurn].status = null\n\n    this.setState({\n      turn: this.state.turn + 1\n    }, () => {\n      this.setState({\n        gamerows: gamerows\n      })\n    })\n  }\n\n  newGame = () => {\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n\n    for (let i = 0; i < this.state.gamerows.length; i++) {\n      gamerows[i].colors.forEach(color => color.color = \"transparent\")\n      gamerows[i].guessedColors.forEach((color, index, guessedColors) => guessedColors[index] = \"transparent\")\n      gamerows[this.state.turn].status = \"inactive\"\n      gamerows[0].status = null\n    }\n    this.setState({\n      turn: 0,\n      gamerows: gamerows,\n      gameEnded: false,\n      gameEndMessage: \"Text\",\n      loading: true,\n      showHiddenColors: false\n    }, () => this.loadingReady())\n  }\n  gameEnded = () => {\n    if (this.state.gameEnded === false) {\n      const turn = this.state.turn\n      let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n      gamerows[turn].status = \"inactive\"\n      this.setState({\n        gameEnded: true,\n        gamerows: gamerows,\n        gameEndMessage: \"Sorry, you lost!\"\n      }, () => setTimeout(() => this.setState({ showHiddenColors: true }), 500)\n      )\n    }\n  }\n  loadingReady = () => {\n    setTimeout(() => this.setState({ loading: false }, () => { this.fillHiddenColors() }), 1200)\n  }\n\n\n  render() {\n    const loadingMessage = this.state.loading ? <LoadingCirlce /> : \"Good Luck!\"\n    const slideClass = this.state.gameEnded ? \"slide-out\" : \"\"\n    const opacityHiddenColors = this.state.showHiddenColors ? \"1\" : \"0\"\n\n    return (\n      <div className=\"App browse-container\">\n        <InfoBoard\n          turnNumber={this.state.turn}\n          newGame={this.newGame}\n          giveUp={this.gameEnded}\n        />\n\n        <div className=\"gameboard\">\n          <GameRows\n            gamerows={this.state.gamerows}\n            turn={this.state.turn}\n            onDragOver={this.onDragOverHandler}\n            onDrop={this.onDropHandler}\n            onDragOut={this.onDragOutHandler}\n            nextRound={this.checkSameColors}\n          />\n          <GameEndMessage\n            gameEnded={this.state.gameEnded}\n            gameEndMessage={this.state.gameEndMessage}\n          />\n          <HiddenColors\n            hiddenColors={this.state.hiddenColors}\n            opacity={opacityHiddenColors}\n            slideOut={slideClass}\n            gameEndMessage={this.state.gameEndMessage}\n            loadingMessage={loadingMessage}\n            gameEnded={this.state.gameEnded}\n          />\n        </div>\n        <SideBoard\n          data={this.state}\n          onDragStart={this.onDragStartHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}