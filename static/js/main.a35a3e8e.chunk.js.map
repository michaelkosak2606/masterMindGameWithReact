{"version":3,"sources":["components/InfoBoard.js","components/Button.js","components/GameRow.js","components/HiddenColors.js","components/SideBoard.js","components/LoadingCircle.js","App.js","serviceWorker.js","index.js"],"names":["InfoBoard","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","className","onClick","props","newGame","giveUp","Component","Button","text","GameRow","_this","colorFields","data","map","colorField","id","draggable","onDragOver","event","onDrop","onDragStart","onDragOut","color","style","backgroundColor","concat","turnNumber","checkTurnNumber","turn","rightArrow","clickable","guessedColors","components_Button","nextRound","HiddenColors","gameEndMessage","opacity","gameEnded","hiddenColorsRow","hiddenColors","hiddenColor","index","slideOut","loadingMessage","SideBoard","spielFiguren","figuren","figurFarbe","LoadingCircle","_ref","type","react_loading_default","height","width","App","state","loading","gamerows","status","colors","fillHiddenColors","toConsumableArray","randomNumbers","i","length","randomNUmber","Math","floor","random","push","setState","onDragOverHandler","preventDefault","onDragStartHandler","colorDragged","dataTransfer","setData","onDragOutHandler","colorDraggedId","gamerow","objectSpread","colorArray","find","object","onDropHandler","indexOfDropCircle","getData","checkSameColors","colorsFromPlayer","rightColors","colorsReduced","filter","rightColorsReduced","rightColor","helparray","forEach","item","number","indexOf","splice","console","log","differenceToFill","JSON","stringify","loadingReady","setTimeout","_this2","components_LoadingCircle","slideClass","opacityHiddenColors","gameboard","row","components_GameRow","components_InfoBoard","components_HiddenColors","components_SideBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a35a3e8e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport class InfoBoard extends Component {\n    render() {\n        return (\n            <div className=\"infoBoard\">\n                <h1>Master Mind </h1>\n                <div className=\"infoBoardButton\" onClick={this.props.newGame}> New Game</div>\n                <div className=\"infoBoardButton\" onClick={this.props.giveUp}>Give up</div>\n            </div>\n        )\n    }\n}\n\nexport default InfoBoard\n","import React, { Component } from 'react'\n\nexport class Button extends Component {\n    render() {\n        return (\n            <div>\n                <button\n                    className=\"gameHistoryButton\"\n                    onClick={this.props.onClick}\n                >\n                    {this.props.text}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Button\n","import React, { Component } from 'react'\nimport Button from './Button'\n\nexport class GameRow extends Component {\n    render() {\n        const colorFields = this.props.data.map(colorField => {\n            return (\n                <div\n                    className=\"gameCircle\"\n                    key={colorField.id}\n                >\n                    <div\n                        draggable\n                        onDragOver={event => this.props.onDragOver(event)}\n                        onDrop={event => this.props.onDrop(event, colorField.id)}\n                        onDragStart={event => this.props.onDragOut(event, colorField.id, colorField.color)}\n                        className=\"circleInside\"\n                        style={{ backgroundColor: `${colorField.color}` }}\n                    >\n                    </div>\n                </div>\n            )\n        })\n        const turnNumber = this.props.checkTurnNumber ?\n            <h2>Turn {this.props.turn + 1}</h2> : null\n\n        const rightArrow = this.props.checkTurnNumber ?\n            <div className=\"arrow-right\"></div> : null\n\n        return (\n            <div className={`gameRow  gameRow-moz ${this.props.clickable}`}>\n                {turnNumber}\n                {rightArrow}\n                <div className=\"hits\">\n                    <div\n                        className=\"square\"\n                        style={{ backgroundColor: `${this.props.guessedColors[0]}` }}\n                    ></div>\n                    <div\n                        className=\"square\"\n                        style={{ backgroundColor: `${this.props.guessedColors[1]}` }}\n                    ></div>\n                    <div\n                        className=\"square\"\n                        style={{ backgroundColor: `${this.props.guessedColors[2]}` }}\n                    ></div>\n                    <div\n                        className=\"square\"\n                        style={{ backgroundColor: `${this.props.guessedColors[3]}` }}\n                    ></div>\n\n                </div>\n                {colorFields}\n                <Button\n                    text=\"TRY IT!!\"\n                    onClick={this.props.nextRound}\n                />\n            </div>\n        )\n    }\n}\n\nexport default GameRow\n\n\n","import React, { Component } from 'react'\n\nexport class HiddenColors extends Component {\n    render() {\n        const gameEndMessage = this.props.gameEndMessage === \"Text\" ? \"\" : \"game-end-message\"\n        const opacity = this.props.gameEnded ? \"1\" : \"0\"\n        const hiddenColorsRow = this.props.hiddenColors.map((hiddenColor, index) => {\n            return (\n                <div\n                    className=\"gameCircle\"\n                    key={index}\n                >\n                    <div\n                        className=\"circleInside\"\n                        style={{ backgroundColor: `${hiddenColor}` }}\n                    >\n                    </div>\n                </div>\n            )\n        })\n        return (\n            <div className=\"hiddenColorsContainer\">\n                <h1 style={{ opacity: opacity }} className={gameEndMessage}>{this.props.gameEndMessage}</h1>\n                <div className=\"hiddenColors hiddenColors-moz\" style={{ opacity: this.props.opacity }}>\n                    {hiddenColorsRow}\n                </div>\n                <div className={\"hiddenColorsBoard  hiddenColorsBoard-moz \" + this.props.slideOut}>\n                    <h1 >\n                        {this.props.loadingMessage}\n                    </h1>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default HiddenColors\n","import React, { Component } from 'react'\n\nexport class SideBoard extends Component {\n    render() {\n        const spielFiguren = this.props.data.figuren.map((figurFarbe, index) => {\n            return (\n                <div\n                    draggable\n                    onDragStart={event => this.props.onDragStart(event, figurFarbe)}\n                    key={index}\n                    className=\"circleInside spielfiguren\"\n                    style={{ backgroundColor: `${figurFarbe}` }}\n                >\n                </div>\n            )\n        })\n\n        return (\n            <div className=\"side-board\">\n                {spielFiguren}\n            </div>\n        )\n    }\n}\n\nexport default SideBoard\n","import React from 'react';\nimport ReactLoading from 'react-loading';\n\nconst LoadingCircle = ({ type, color }) => (\n    <div className=\"loading\">\n        <span>Loading new game</span>\n        <ReactLoading type={\"spin\"} color={\"white\"} height={40} width={40} />\n    </div>\n);\n\nexport default LoadingCircle;","import React, { Component } from 'react';\nimport InfoBoard from './components/InfoBoard'\nimport GameRow from './components/GameRow'\nimport HiddenColors from './components/HiddenColors'\nimport SideBoard from './components/SideBoard'\nimport LoadingCirlce from \"./components/LoadingCircle\";\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    loading: true,\n    gameEndMessage: \"Text\",\n    gameEnded: false,\n    hiddenColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n    turn: 0,\n    gamerows: [\n      {\n        status: null,\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 1, color: 'transparent' },\n          { id: 2, color: 'transparent' },\n          { id: 3, color: 'transparent' },\n          { id: 4, color: 'transparent' }\n        ]\n      },\n      {\n        status: \"inactive\",\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 5, color: 'transparent' },\n          { id: 6, color: 'transparent' },\n          { id: 7, color: 'transparent' },\n          { id: 8, color: 'transparent' }\n        ]\n      },\n      {\n        status: \"inactive\",\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 9, color: 'transparent' },\n          { id: 10, color: 'transparent' },\n          { id: 11, color: 'transparent' },\n          { id: 12, color: 'transparent' }\n        ]\n      },\n      {\n        status: \"inactive\",\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 13, color: 'transparent' },\n          { id: 14, color: 'transparent' },\n          { id: 15, color: 'transparent' },\n          { id: 16, color: 'transparent' }\n        ]\n      },\n      {\n        status: \"inactive\",\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 17, color: 'transparent' },\n          { id: 18, color: 'transparent' },\n          { id: 19, color: 'transparent' },\n          { id: 20, color: 'transparent' }\n        ]\n      },\n      {\n        status: \"inactive\",\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 21, color: 'transparent' },\n          { id: 22, color: 'transparent' },\n          { id: 23, color: 'transparent' },\n          { id: 24, color: 'transparent' }\n        ]\n      },\n\n    ],\n    figuren: [\"#FFDC00\", \"pink\", \"aquamarine\", \"#01FF70\", \"#0074D9\", \"#111111\"]\n  }\n  fillHiddenColors = () => {\n    const colors = [...this.state.figuren, 'transparent']\n    let randomNumbers = []\n    for (let i = 1; i <= this.state.hiddenColors.length; i++) {\n      let randomNUmber = Math.floor((Math.random() * colors.length))\n      if (randomNUmber === 7) { randomNUmber = 6 }\n      randomNumbers.push(randomNUmber)\n    }\n    const hiddenColors = randomNumbers.map(randomNUmber => {\n      return (colors[randomNUmber])\n    })\n    this.setState({\n      hiddenColors: hiddenColors\n    })\n  }\n\n  onDragOverHandler = event => {\n    event.preventDefault()\n  }\n\n  onDragStartHandler = (event, colorDragged) => {\n    // console.log(\"dragging element with color: \" + colorDragged)\n    event.dataTransfer.setData(\"colorDragged\", colorDragged)\n  }\n  onDragOutHandler = (event, colorDraggedId, colorDragged) => {\n    event.dataTransfer.setData(\"colorDragged\", colorDragged)\n\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    let turn = this.state.turn\n    let colorArray = this.state.gamerows[turn].colors.map(color => { return { ...color } })\n    colorArray.find(object => object.id === colorDraggedId).color = \"transparent\"\n    gamerows[turn].colors = colorArray\n\n    this.setState({\n      gamerows: gamerows\n    })\n  }\n\n  onDropHandler = (event, indexOfDropCircle) => {\n    let colorDragged = event.dataTransfer.getData(\"colorDragged\")\n    let turn = this.state.turn\n    let colorArray = this.state.gamerows[turn].colors.map(color => { return { ...color } })\n    colorArray.find(object => object.id === indexOfDropCircle).color = colorDragged\n\n    //Setting State\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    gamerows[turn].colors = colorArray\n    this.setState({\n      gamerows: gamerows\n    })\n  }\n\n  checkSameColors = () => {\n    let turn = this.state.turn\n    let colorsFromPlayer = this.state.gamerows[turn].colors.map(color => { return color.color })\n    let rightColors = [...this.state.hiddenColors]\n    let guessedColors = []\n\n    const colorsReduced = colorsFromPlayer.filter((color, index) => {\n      return color !== rightColors[index]\n    })\n    const rightColorsReduced = rightColors.filter((rightColor, index) => {\n      return rightColor !== colorsFromPlayer[index]\n    })\n    /////////////////////////////////////////////////////\n    ///Putting Black Colors into guessed Array\n    for (let i = 1; i <= colorsFromPlayer.length - colorsReduced.length; i++) {\n      guessedColors.push(\"black\")\n    }\n    //////////////////////////////////////////////////\n    ///Checking reduced arrays to put white colors into guessedColors\n    let helparray = []\n    colorsReduced.forEach((item, index) => {\n      for (let i = 0; i < rightColorsReduced.length; i++) {\n        if (item === rightColorsReduced[i]) {\n          helparray.push(item)\n        }\n      }\n      if (helparray.length > 0) {\n        guessedColors.push(\"white\")\n        let number = rightColorsReduced.indexOf(helparray[0])\n        rightColorsReduced.splice(number, 1)\n        helparray = []\n      }\n    })\n    ////Fill guessedColors with null, if its shorter than 4\n    console.log(guessedColors)\n    let differenceToFill = this.state.hiddenColors.length - guessedColors.length\n    for (let i = 0; i < differenceToFill; i++) {\n      guessedColors.push('transparent')\n    }\n\n    ///Putting guessedColors into state\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    gamerows[turn].guessedColors = guessedColors\n\n    if (JSON.stringify(guessedColors) === JSON.stringify([\"black\", \"black\", \"black\", \"black\"])) {\n      this.setState({\n        gamerows: gamerows,\n        gameEnded: true,\n        gameEndMessage: \"You won, congratulations! :)\"\n      })\n\n    } else if (JSON.stringify(guessedColors) !== JSON.stringify([\"black\", \"black\", \"black\", \"black\"]) && this.state.turn === 5) {\n      this.setState({\n        gamerows: gamerows,\n      }, () => this.gameEnded())\n    }\n    else {\n      this.setState({\n        gamerows: gamerows\n      }, () => this.nextRound())\n    }\n  }\n\n  nextRound = () => {\n    let turn = this.state.turn\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    gamerows[turn].status = \"inactive\"\n    let nextTurn = turn + 1\n    gamerows[nextTurn].status = null\n\n    this.setState({\n      turn: this.state.turn + 1\n    }, () => {\n      this.setState({\n        gamerows: gamerows\n      })\n    })\n  }\n\n  newGame = () => {\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n\n    for (let i = 0; i < 6; i++) {\n      gamerows[i].colors.forEach(color => color.color = \"transparent\")\n      gamerows[i].guessedColors.forEach((color, index, guessedColors) => guessedColors[index] = \"transparent\")\n      gamerows[this.state.turn].status = \"inactive\"\n      gamerows[0].status = null\n    }\n    this.setState({\n      turn: 0,\n      gamerows: gamerows,\n      gameEnded: false,\n      gameEndMessage: \"Text\",\n      loading: true\n    }, () => this.loadingReady())\n  }\n  gameEnded = () => {\n    if (this.state.gameEnded === false) {\n      const turn = this.state.turn\n      let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n      gamerows[turn].status = \"inactive\"\n      this.setState({\n        gameEnded: true,\n        gamerows: gamerows,\n        gameEndMessage: \"Sorry, you lost!\"\n      })\n    }\n  }\n  loadingReady = () => {\n    this.fillHiddenColors()\n    setTimeout(() => this.setState({ loading: false }), 1200)\n  }\n\n  componentDidMount() {\n    this.loadingReady()\n  }\n  render() {\n    const loadingMessage = this.state.loading ? <LoadingCirlce /> : \"Good Luck!\"\n\n    const slideClass = this.state.gameEnded ? \"slide-out\" : \"\"\n    const opacityHiddenColors = this.state.gameEnded ? \"1\" : \"0\"\n    const gameboard = this.state.gamerows.map((row, index) => {\n      const checkTurnNumber = this.state.turn === index\n      return (\n        <GameRow\n          key={index}\n          onDragOver={this.onDragOverHandler}\n          onDrop={this.onDropHandler}\n          data={this.state.gamerows[index].colors}\n          clickable={row.status}\n          nextRound={this.checkSameColors}\n          checkTurnNumber={checkTurnNumber}\n          turn={this.state.turn}\n          guessedColors={this.state.gamerows[index].guessedColors}\n          onDragOut={this.onDragOutHandler}\n\n        />\n      )\n    })\n\n\n\n    return (\n      <div className=\"App\">\n\n        <InfoBoard\n          turnNumber={this.state.turn}\n          newGame={this.newGame}\n          giveUp={this.gameEnded}\n        />\n\n        <div className=\"gameboard\">\n          {gameboard}\n          <HiddenColors\n            hiddenColors={this.state.hiddenColors}\n            opacity={opacityHiddenColors}\n            slideOut={slideClass}\n            gameEndMessage={this.state.gameEndMessage}\n            loadingMessage={loadingMessage}\n            gameEnded={this.state.gameEnded}\n\n          />\n        </div>\n        <SideBoard\n          data={this.state}\n          onDragStart={this.onDragStartHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}