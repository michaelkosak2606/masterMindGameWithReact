{"version":3,"sources":["components/InfoBoard.js","components/Button.js","components/GameRow.js","components/Gamerows.js","components/HiddenColors.js","components/SideBoard.js","components/LoadingCircle.js","components/GameEndMessage.js","App.js","serviceWorker.js","index.js"],"names":["InfoBoard","props","react_default","a","createElement","className","onClick","newGame","giveUp","button","text","GameRow","colorFields","colors","map","colorField","key","id","draggable","onDragOver","event","onDrop","onDragStart","onDragOut","color","style","backgroundColor","concat","opacity","turn","rightArrowAndTurn","clickable","guessedColors","Button","nextRound","GameRows","data","gamerows","gameRows","row","index","checkTurnNumber","components_GameRow","status","HiddenColors","hiddenColorsRow","hiddenColors","hiddenColor","slideOut","loadingMessage","SideBoard","gamePieces","loadingCircle","_ref","type","react_loading_default","height","width","GameEndMessage","gameEnded","gameEndMessage","App","state","loading","showHiddenColors","fillHiddenColors","Object","toConsumableArray","_this","randomNumbers","i","length","randomNumber","Math","floor","random","push","setState","onDragOverHandler","preventDefault","onDragStartHandler","colorDragged","dataTransfer","setData","onDragOutHandler","colorDraggedId","gamerow","objectSpread","colorArray","find","object","onDropHandler","indexOfDropCircle","getData","checkSameColors","colorsFromPlayer","rightColors","colorsReduced","filter","rightColorsReduced","rightColor","helparray","forEach","item","number","indexOf","splice","differenceToFill","JSON","stringify","loadingReady","setTimeout","this","LoadingCircle","slideClass","opacityHiddenColors","components_InfoBoard","turnNumber","Gamerows","components_GameEndMessage","components_HiddenColors","components_SideBoard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e47d43d.chunk.js","sourcesContent":["import React from 'react'\n\nconst InfoBoard = props => {\n    return (\n        <div className=\"info-board\">\n            <h1>Master Mind </h1>\n            <div className=\"info-board-button\" onClick={props.newGame}> new game</div>\n            <div className=\"info-board-button\" onClick={props.giveUp}>give up</div>\n        </div>\n    )\n}\n\n\nexport default InfoBoard\n","import React from 'react'\n\nconst button = props => {\n    return (\n        <div>\n            <button\n                className=\"next-round-button\"\n                onClick={props.onClick}\n            >\n                {props.text}\n            </button>\n        </div>\n    )\n}\n\nexport default button\n","import React from 'react'\nimport Button from './Button'\n\nconst GameRow = props => {\n    const colorFields = props.colors.map(colorField => {\n        return (\n            <div\n                className=\"game-circle\"\n                key={colorField.id}\n            >\n                <div\n                    draggable\n                    onDragOver={event => props.onDragOver(event)}\n                    onDrop={event => props.onDrop(event, colorField.id)}\n                    onDragStart={event => props.onDragOut(event, colorField.id, colorField.color)}\n                    className=\"circle-inside\"\n                    style={{ backgroundColor: `${colorField.color}` }}\n                >\n                </div>\n            </div>\n        )\n    })\n\n    const opacity = props.opacity === props.turn ? \"1\" : \"0\"\n    const rightArrowAndTurn =\n        <div className=\"right-arrow-container\" style={{ opacity: opacity }}>\n            <h2>Turn {props.turn + 1}</h2>\n            <div className=\"arrow-right\"></div>\n        </div>\n    return (\n        <div className={`game-row  game-row-moz ${props.clickable}`}>\n\n            {rightArrowAndTurn}\n            <div className=\"hits\">\n                <div\n                    className=\"square\"\n                    style={{ backgroundColor: `${props.guessedColors[0]}` }}\n                ></div>\n                <div\n                    className=\"square\"\n                    style={{ backgroundColor: `${props.guessedColors[1]}` }}\n                ></div>\n                <div\n                    className=\"square\"\n                    style={{ backgroundColor: `${props.guessedColors[2]}` }}\n                ></div>\n                <div\n                    className=\"square\"\n                    style={{ backgroundColor: `${props.guessedColors[3]}` }}\n                ></div>\n\n            </div>\n            {colorFields}\n            <Button\n                text=\"TRY IT!!\"\n                onClick={props.nextRound}\n            />\n        </div>\n    )\n}\n\n\nexport default GameRow\n\n\n","import React from 'react'\nimport GameRow from './GameRow'\n\n\nconst GameRows = props => {\n    const data = props.gamerows\n    const gameRows = data.map((row, index) => {\n        const checkTurnNumber = props.turn === index\n        return (\n            <GameRow\n                key={index}\n                onDragOver={props.onDragOver}\n                onDrop={props.onDrop}\n                colors={data[index].colors}\n                clickable={row.status}\n                nextRound={props.nextRound}\n                checkTurnNumber={checkTurnNumber}\n                turn={props.turn}\n                guessedColors={data[index].guessedColors}\n                onDragOut={props.onDragOut}\n                opacity={index}\n            />\n        )\n    })\n    return (\n        <div className=\"game-rows\">\n            {gameRows}\n        </div>\n    )\n}\n\n\nexport default GameRows\n","import React from 'react'\n\nconst HiddenColors = props => {\n    const hiddenColorsRow = props.hiddenColors.map((hiddenColor, index) => {\n        return (\n            <div\n                className=\"game-circle\"\n                key={index}\n            >\n                <div\n                    className=\"circle-inside\"\n                    style={{ backgroundColor: `${hiddenColor}` }}\n                >\n                </div>\n            </div>\n        )\n    })\n    return (\n        <div className=\"hidden-colors-container\">\n            <div className={\"hidden-colors-board \" + props.slideOut}>\n                <h1 >\n                    {props.loadingMessage}\n                </h1>\n            </div>\n            <div className=\"hidden-colors\" style={{ opacity: props.opacity }}>\n                {hiddenColorsRow}\n            </div>\n        </div>\n    )\n}\n\n\nexport default HiddenColors\n","import React from 'react'\n\nconst SideBoard = props => {\n\n    const gamePieces = props.data.gamePieces.map((color, index) => {\n        return (\n            <div\n                className=\"circle-inside game-pieces\"\n                draggable\n                onDragStart={event => props.onDragStart(event, color)}\n                key={index}\n                style={{ backgroundColor: `${color}` }}\n            >\n            </div>\n        )\n    })\n\n    return (\n        <div className=\"side-board\">\n            {gamePieces}\n        </div>\n    )\n}\n\n\nexport default SideBoard\n","import React from 'react';\nimport ReactLoading from 'react-loading';\n\nconst loadingCircle = ({ type, color }) => (\n    <div className=\"loading\">\n        <span>Loading new game</span>\n        <ReactLoading type={\"spin\"} color={\"white\"} height={40} width={40} />\n    </div>\n);\n\nexport default loadingCircle;","import React from 'react'\n\nconst GameEndMessage = props => {\n    const opacity = props.gameEnded ? \"1\" : \"0\"\n    const gameEndMessage = props.gameEndMessage === \"Text\" ? \"\" : \"game-end-message\"\n\n    return (\n        <div className={gameEndMessage} style={{ opacity: opacity }}>\n            <h1> {props.gameEndMessage} </h1>\n        </div>\n    )\n}\n\nexport default GameEndMessage\n","import React, { Component } from 'react';\nimport InfoBoard from './components/InfoBoard'\nimport GameRows from './components/Gamerows'\nimport HiddenColors from './components/HiddenColors'\nimport SideBoard from './components/SideBoard'\nimport LoadingCirlce from \"./components/LoadingCircle\";\nimport GameEndMessage from \"./components/GameEndMessage\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    loading: true,\n    gameEndMessage: 'Text',\n    gameEnded: false,\n    hiddenColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n    showHiddenColors: false,\n    turn: 0,\n    gamerows: [\n      {\n        status: null,\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 1, color: 'transparent' },\n          { id: 2, color: 'transparent' },\n          { id: 3, color: 'transparent' },\n          { id: 4, color: 'transparent' }\n        ]\n      },\n      {\n        status: \"inactive\",\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 5, color: 'transparent' },\n          { id: 6, color: 'transparent' },\n          { id: 7, color: 'transparent' },\n          { id: 8, color: 'transparent' }\n        ]\n      },\n      {\n        status: \"inactive\",\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 9, color: 'transparent' },\n          { id: 10, color: 'transparent' },\n          { id: 11, color: 'transparent' },\n          { id: 12, color: 'transparent' }\n        ]\n      },\n      {\n        status: \"inactive\",\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 13, color: 'transparent' },\n          { id: 14, color: 'transparent' },\n          { id: 15, color: 'transparent' },\n          { id: 16, color: 'transparent' }\n        ]\n      },\n      {\n        status: \"inactive\",\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 17, color: 'transparent' },\n          { id: 18, color: 'transparent' },\n          { id: 19, color: 'transparent' },\n          { id: 20, color: 'transparent' }\n        ]\n      },\n      {\n        status: \"inactive\",\n        guessedColors: ['transparent', 'transparent', 'transparent', 'transparent'],\n        colors: [\n          { id: 21, color: 'transparent' },\n          { id: 22, color: 'transparent' },\n          { id: 23, color: 'transparent' },\n          { id: 24, color: 'transparent' }\n        ]\n      },\n\n    ],\n    gamePieces: [\"#FFDC00\", \"pink\", \"aquamarine\", \"#01FF70\", \"#0074D9\", \"#111111\"]\n  }\n\n  fillHiddenColors = () => {\n    const colors = [...this.state.gamePieces, 'transparent']\n    let randomNumbers = []\n    for (let i = 1; i <= this.state.hiddenColors.length; i++) {\n      let randomNumber = Math.floor((Math.random() * colors.length))\n      if (randomNumber === colors.length) { randomNumber = colors.length - 1 }\n      randomNumbers.push(randomNumber)\n    }\n    const hiddenColors = randomNumbers.map(randomNumber => {\n      return (colors[randomNumber])\n    })\n    this.setState({\n      hiddenColors: hiddenColors\n    })\n  }\n\n  onDragOverHandler = event => {\n    event.preventDefault()\n  }\n\n  onDragStartHandler = (event, colorDragged) => {\n    event.dataTransfer.setData(\"colorDragged\", colorDragged)\n  }\n  onDragOutHandler = (event, colorDraggedId, colorDragged) => {\n    event.dataTransfer.setData(\"colorDragged\", colorDragged)\n\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    let turn = this.state.turn\n    let colorArray = this.state.gamerows[turn].colors.map(color => { return { ...color } })\n    colorArray.find(object => object.id === colorDraggedId).color = \"transparent\"\n    gamerows[turn].colors = colorArray\n\n    this.setState({\n      gamerows: gamerows\n    })\n  }\n\n  onDropHandler = (event, indexOfDropCircle) => {\n    let colorDragged = event.dataTransfer.getData(\"colorDragged\")\n    let turn = this.state.turn\n    let colorArray = this.state.gamerows[turn].colors.map(color => { return { ...color } })\n    colorArray.find(object => object.id === indexOfDropCircle).color = colorDragged\n\n    //Setting State\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    gamerows[turn].colors = colorArray\n    this.setState({\n      gamerows: gamerows\n    })\n  }\n\n  checkSameColors = () => {\n    let turn = this.state.turn\n    let colorsFromPlayer = this.state.gamerows[turn].colors.map(color => { return color.color })\n    let rightColors = [...this.state.hiddenColors]\n    let guessedColors = []\n\n    const colorsReduced = colorsFromPlayer.filter((color, index) => {\n      return color !== rightColors[index]\n    })\n    const rightColorsReduced = rightColors.filter((rightColor, index) => {\n      return rightColor !== colorsFromPlayer[index]\n    })\n    /////////////////////////////////////////////////////\n    ///Putting Black Colors into guessed Array\n    for (let i = 1; i <= colorsFromPlayer.length - colorsReduced.length; i++) {\n      guessedColors.push(\"black\")\n    }\n    //////////////////////////////////////////////////\n    ///Checking reduced arrays to put white colors into guessedColors\n    let helparray = []\n    colorsReduced.forEach((item, index) => {\n      for (let i = 0; i < rightColorsReduced.length; i++) {\n        if (item === rightColorsReduced[i]) {\n          helparray.push(item)\n        }\n      }\n      if (helparray.length > 0) {\n        guessedColors.push(\"white\")\n        let number = rightColorsReduced.indexOf(helparray[0])\n        rightColorsReduced.splice(number, 1)\n        helparray = []\n      }\n    })\n    ////Fill guessedColors with null, if its shorter than 4\n    let differenceToFill = this.state.hiddenColors.length - guessedColors.length\n    for (let i = 0; i < differenceToFill; i++) {\n      guessedColors.push('transparent')\n    }\n\n    ///Putting guessedColors into state\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    gamerows[turn].guessedColors = guessedColors\n\n    if (JSON.stringify(guessedColors) === JSON.stringify([\"black\", \"black\", \"black\", \"black\"])) {\n      this.setState({\n        gamerows: gamerows,\n        gameEnded: true,\n        gameEndMessage: \"You won, congratulations! :)\",\n        showHiddenColors: true\n      })\n\n    } else if (JSON.stringify(guessedColors) !== JSON.stringify([\"black\", \"black\", \"black\", \"black\"]) && this.state.turn === 5) {\n      this.setState({\n        gamerows: gamerows,\n      }, () => this.gameEnded())\n    }\n    else {\n      this.setState({\n        gamerows: gamerows\n      }, () => this.nextRound())\n    }\n  }\n\n  nextRound = () => {\n    let turn = this.state.turn\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n    gamerows[turn].status = \"inactive\"\n    let nextTurn = turn + 1\n    gamerows[nextTurn].status = null\n\n    this.setState({\n      turn: this.state.turn + 1\n    }, () => {\n      this.setState({\n        gamerows: gamerows\n      })\n    })\n  }\n\n  newGame = () => {\n    let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n\n    for (let i = 0; i < this.state.gamerows.length; i++) {\n      gamerows[i].colors.forEach(color => color.color = \"transparent\")\n      gamerows[i].guessedColors.forEach((color, index, guessedColors) => guessedColors[index] = \"transparent\")\n      gamerows[this.state.turn].status = \"inactive\"\n      gamerows[0].status = null\n    }\n    this.setState({\n      turn: 0,\n      gamerows: gamerows,\n      gameEnded: false,\n      gameEndMessage: \"Text\",\n      loading: true,\n      showHiddenColors: false\n    }, () => this.loadingReady())\n  }\n  gameEnded = () => {\n    if (this.state.gameEnded === false) {\n      const turn = this.state.turn\n      let gamerows = this.state.gamerows.map(gamerow => { return { ...gamerow } })\n      gamerows[turn].status = \"inactive\"\n      this.setState({\n        gameEnded: true,\n        gamerows: gamerows,\n        gameEndMessage: \"Sorry, you lost!\"\n      }, () => setTimeout(() => this.setState({ showHiddenColors: true }), 500)\n      )\n    }\n  }\n  loadingReady = () => {\n    setTimeout(() => this.setState({ loading: false }, () => { this.fillHiddenColors() }), 1200)\n  }\n\n  componentDidMount() {\n    this.loadingReady()\n  }\n  render() {\n    const loadingMessage = this.state.loading ? <LoadingCirlce /> : \"Good Luck!\"\n    const slideClass = this.state.gameEnded ? \"slide-out\" : \"\"\n    const opacityHiddenColors = this.state.showHiddenColors ? \"1\" : \"0\"\n\n    return (\n      <div className=\"App\">\n        <InfoBoard\n          turnNumber={this.state.turn}\n          newGame={this.newGame}\n          giveUp={this.gameEnded}\n        />\n\n        <div className=\"gameboard\">\n          <GameRows\n            gamerows={this.state.gamerows}\n            turn={this.state.turn}\n            onDragOver={this.onDragOverHandler}\n            onDrop={this.onDropHandler}\n            onDragOut={this.onDragOutHandler}\n            nextRound={this.checkSameColors}\n          />\n          <GameEndMessage\n            gameEnded={this.state.gameEnded}\n            gameEndMessage={this.state.gameEndMessage}\n          />\n          <HiddenColors\n            hiddenColors={this.state.hiddenColors}\n            opacity={opacityHiddenColors}\n            slideOut={slideClass}\n            gameEndMessage={this.state.gameEndMessage}\n            loadingMessage={loadingMessage}\n            gameEnded={this.state.gameEnded}\n          />\n        </div>\n        <SideBoard\n          data={this.state}\n          onDragStart={this.onDragStartHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}